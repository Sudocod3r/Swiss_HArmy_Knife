import argparse
import subprocess
import json
import requests
import nmap
import os
import shutil

#Import Sublist3r
try:
    from Sublist3r import main as Sublist3r
except ImportError:
    Sublist3r = None

# ------------------- TOOL FUNCTIONS -------------------

def check_dependencies():
    required_tools = [
        "ping", "traceroute", "nmap", "ffuf", "whatweb", "nikto",
        "nuclei", "wpscan", "hydra",
    ]
    missing = []
    for tool in required_tools:
        if shutil.which(tool) is None:
            missing.append(tool)
    if missing:
        print("[!] Missing dependencies:", ", ".join(missing))
        print("[!] Please install them before continuing.")
        exit(1)

def ping_host(host):
    try:
        return subprocess.check_output(["ping", "-c", "4", host], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

def traceroute_host(host):
    try:
        return subprocess.check_output(["traceroute", host], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

def scan_http_headers(host):
    try:
        url = host if host.startswith("http") else f"http://{host}"
        r = requests.get(url, timeout=10)
        return {
            "Server": r.headers.get("Server", "Unknown"),
            "X-Powered-By": r.headers.get("X-Powered-By", "Unknown"),
            "Content-Type": r.headers.get("Content-Type", "Unknown"),
        }
    except requests.RequestException as e:
        return f"Request failed: {e}"

def run_whatweb(domain):
    try:
        return subprocess.check_output(["whatweb", domain], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

def enumerate_subdomains(domain):
    if not Sublist3r:
        return "Sublist3r not installed"
    try:
        return Sublist3r(domain, 40, None, None, True, False, False, None)
    except Exception as e:
        return f"Sublist3r error: {e}"

def scan_ports(host):
    try:
        nm = nmap.PortScanner()
        nm.scan(host, arguments="-T4 -sV -sC -O -p 21,22,80,443,8080")
        results = {}
        for h in nm.all_hosts():
            results[h] = {
                "state": nm[h].state(),
                "hostname": nm[h].hostname(),
                "os": nm[h].get("osmatch", []),
                "ports": nm[h]["tcp"]
            }
        return results
    except Exception as e:
        return f"Nmap error: {e}"


def run_ffuf(domain):
    try:
        wordlist = "/usr/share/wordlists/dirb/common.txt"
        return subprocess.check_output(["ffuf", "-u", f"http://{domain}/FUZZ", "-w", wordlist, "-mc", "200"], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

def run_nikto(domain):
    try:
        return subprocess.check_output(["nikto", "-h", domain], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

def run_nuclei(domain):
    try:
        return subprocess.check_output(["nuclei", "-u", domain], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

def run_wpscan(domain):
    try:
        return subprocess.check_output(["wpscan", "--url", domain, "--disable-tls-checks"], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

def run_hydra(domain):
    if not os.path.exists("users.txt") or not os.path.exists("pass.txt"):
        return "Missing users.txt or pass.txt for Hydra."
    try:
        return subprocess.check_output(["hydra", "-L", "users.txt", "-P", "pass.txt", domain, "http-get"], stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        return e.output

# ------------------- PRETTY OUTPUT -------------------

def pretty_print(results):
    print("\n=== Final Results (Human-Readable) ===")
    for key, value in results.items():
        print(f"\n[{key}]")
        if isinstance(value, dict):
            for k, v in value.items():
                if isinstance(v, dict):
                    print(f"  {k}:")
                    for subk, subv in v.items():
                        print(f"    {subk}: {subv}")
                else:
                    print(f"  {k}: {v}")
        elif isinstance(value, list):
            for item in value:
                print(f"  - {item}")
        elif isinstance(value, str):
            lines = value.strip().splitlines()
            for line in lines:
                print(f"  {line.strip()}")
        else:
            print(f"  {value}")

# ------------------- MAIN -------------------

def main():
    check_dependencies()

    parser = argparse.ArgumentParser(description="Linux CLI Web App Pentesting Toolkit")
    parser.add_argument("target", help="Target IP or domain")
    parser.add_argument("--ping", action="store_true")
    parser.add_argument("--traceroute", action="store_true")
    parser.add_argument("--headers", action="store_true")
    parser.add_argument("--whatweb", action="store_true")
    parser.add_argument("--subdomains", action="store_true")
    parser.add_argument("--ports", action="store_true")
    parser.add_argument("--ffuf", action="store_true")
    parser.add_argument("--nikto", action="store_true")
    parser.add_argument("--nuclei", action="store_true")
    parser.add_argument("--wpscan", action="store_true")
    parser.add_argument("--hydra", action="store_true")
    parser.add_argument("--save", metavar="FILENAME")

    args = parser.parse_args()
    results = {}

    if args.ping:
        results["Ping"] = ping_host(args.target)
    if args.traceroute:
        results["Traceroute"] = traceroute_host(args.target)
    if args.headers:
        results["Headers"] = scan_http_headers(args.target)
    if args.whatweb:
        results["WhatWeb"] = run_whatweb(args.target)
    if args.subdomains:
        results["Subdomains"] = enumerate_subdomains(args.target)
    if args.ports:
        results["Port Scan"] = scan_ports(args.target)
    if args.ffuf:
        results["FFUF"] = run_ffuf(args.target)
    if args.nikto:
        results["Nikto"] = run_nikto(args.target)
    if args.nuclei:
        results["Nuclei"] = run_nuclei(args.target)
    if args.wpscan:
        results["WPScan"] = run_wpscan(args.target)
    if args.hydra:
        results["Hydra"] = run_hydra(args.target)

    pretty_print(results)

    if args.save:
        try:
            with open(args.save, "w") as f:
                json.dump(results, f, indent=4)
            print(f"\n[+] Results saved to {args.save}")
        except Exception as e:
            print(f"Error saving results: {e}")

if __name__ == "__main__":
    main()
